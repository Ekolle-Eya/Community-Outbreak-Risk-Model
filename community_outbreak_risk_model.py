# -*- coding: utf-8 -*-
"""Community Outbreak Risk Model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15_RXn-SpXKJr23XSmYSdl2bXLrcGu9gf

#Community Risk Model Based on Environmental Indicators

###**The dataset for this model involve 72 communities (records)**
The dataset highlights the interconnectedness of environmental factors and public health risk. it is therefore, a holistic approach that addresses water quality, sanitation, waste management, and access to resources is essential for effective risk reduction and community well-being.

####**The model provided a core study on how community indicators can influnce a risk to public health, waterborne disease and lack of basic sanitation and hygiene resources**


*   This model is built to predict **Community Outbreak Risk**such as waterborne disease risk, lack of resources and environmental health risk.
*   The model was trained with real data accross **30 communities** in 5 countries in Africa and realistic syntethic data all together  making up **72 communities**. The model was trained on **70%** of the data and **30%** as test data.



#### Note:*"Avg_Toilet_School is the average distance of toilet to the schools in the community", "Avg_Toilet_Household is the average distance of toilet to the households in the community","Avg_Toilet_School is the average distance of toilet to the schools in the community"*
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

from google.colab import files
uploaded=files.upload()

df= pd.read_csv('comdatarisk_data.csv', sep=',') #code for reading data from an excel file with multiple sheets and selecting a particular sheet
df.head(10)

df.isnull().sum()
#print(df['Community outbreak risk'])

df['Community outbreak risk']=df['Community outbreak risk']/100
print(df['Community outbreak risk'])

df.info()

# Prepare features (all columns except Community_Risk)
X = df.drop('Community outbreak risk', axis=1)
y = df['Community outbreak risk']
# Define features and target
#X = df_hsc.iloc[:, 2:25]  # Columns 6-9 (0-based index 25-30)
#y = df['Community_Risk'] #['Risk_Score']

# 2. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train a Linear Regression Model
model_com = RandomForestRegressor(n_estimators=100, max_depth=10,  random_state=42)
model_com.fit(X_train, y_train)

# Predict on the training set
y_pred = model_com.predict(X_test)
print(y_pred)

def risk_level (y_preds):
  for y_pred in y_preds:
    if y_pred >= 0.9:
      print(f"Risk_Level: {y_pred:.2f} - Very high risk: Communities in this category require immediate and comprehensive intervention. Policies should focus on emergency response, including rapid deployment of sanitation and hygiene resources, provision of safe drinking water, and establishment of temporary medical facilities. Control measures should include widespread public health campaigns, strict waste management enforcement, and close monitoring of water quality at multiple points. Given the strong correlation with factors like number of outbreaks, waterborne disease cases, and proximity to toilets/water sources, prioritizing access to improved sanitation and safe water is critical.")
    elif y_pred >= 0.6 and y_pred < 0.9:
      print(f"Risk_Level: {y_pred:.2f} - High risk: These communities are highly vulnerable and need proactive measures to prevent outbreaks. Policies should prioritize infrastructure development for improved water and sanitation systems. Control measures should include regular water quality testing, community-led hygiene promotion programs, and proper waste disposal systems. The dataset suggests that factors like amount of drinking water consumed and plastic waste also contribute to risk, so addressing these through awareness campaigns and waste reduction initiatives is important.")
    elif y_pred >= 0.3 and y_pred < 0.6:
      print(f"Risk_level: {y_pred:.2f} - Medium risk: Communities at medium risk should focus on strengthening existing public health programs and infrastructure. Policies could include incentives for household toilet construction and maintenance, and investment in community-level water treatment solutions. Control measures should involve routine health check-ups, monitoring of environmental indicators, and educational programs on safe hygiene practices. The influence of factors like average distance to water and toilets from schools and households highlights the need to improve accessibility to these resources.")
    elif y_pred < 0.3:
      print(f"Risk_level: {y_pred:.2f} - Low risk: While the risk is low, these communities should maintain vigilance and continue implementing basic sanitation and hygiene practices. Policies can focus on sustainable environmental management and long-term infrastructure planning. Control measures should include ongoing monitoring of key environmental indicators and promoting good hygiene behaviors. The low risk in these communities suggests that current measures are effective, but continuous efforts are needed to prevent future risks.")

  return y_preds

risk_level(y_pred) #The y_pred values can be converted to percentages to reflect more meaning in relationship to community risk.

# Evaluate
print("RÂ² Score:", r2_score(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))

# Feature importance
feature_importance = pd.DataFrame({
    'feature': X.columns,
    'importance': model_com.feature_importances_
}).sort_values('importance', ascending=False)
print(feature_importance)

import shap
shap_values = shap.TreeExplainer(model_com).shap_values(X_test)
shap.summary_plot(shap_values, X_test)

from sklearn.model_selection import cross_val_score
scores=cross_val_score(model_com,X,y,cv=5)
print(scores)

import seaborn as sns
import matplotlib.pyplot as plt

fig, axes = plt.subplots(3, 3, figsize=(12, 10))
axes = axes.flatten()  # Flatten the 3x3 array of axes into a 1D array

features_to_plot = [
    'Avg. Toilet-Household (m)',
    'Avg. Water-School (m)',
    'Waterborne disease cases',
    'Amount of drinking water consumed',
    'Avg. Water-Household (m)',
    'Tons of plastic waste',
    'Number of deaths',
    'Number of  outbreaks',
    'Avg. Toilet-School (m)'
]

for i, feature in enumerate(features_to_plot):
    sns.lineplot(data=df, x='Community outbreak risk', y=feature, ax=axes[i])
    axes[i].set_title(f'{feature} vs Community Risk')
    axes[i].set_xlabel('Community Risk')
    axes[i].set_ylabel(feature)


plt.tight_layout()
plt.show()

# Add Noise (Optional Realism)

# Add Gaussian noise to Risk Score (e.g., from external unknowns)
noise = np.random.normal(0, 0.05, size=len(df))
df['Community outbreak risk'] += noise
df['Community outbreak risk'] = df['Community outbreak risk'].clip(0, 1)  # keep between 0 and 1

# Display the first few rows to see the effect of adding noise
display(df.head())

# Define features and target
# Prepare features (all columns except Community_Risk)
X = df.drop('Community outbreak risk', axis=1)
y = df['Community outbreak risk']

# 2. Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Linear Regression Model
model = RandomForestRegressor(n_estimators=100, max_depth=10, random_state=42)
model.fit(X_train, y_train)

#predicting model
y_pred = model.predict(X_test)
print(y_pred)

# Evaluate
print("RÂ² Score:", r2_score(y_test, y_pred))
print("MSE:", mean_squared_error(y_test, y_pred))